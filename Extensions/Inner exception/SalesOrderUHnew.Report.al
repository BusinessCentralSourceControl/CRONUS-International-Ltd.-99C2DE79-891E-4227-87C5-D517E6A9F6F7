dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.1.0.2112")
    {
        type(ForNav.Report_6_1_0_2112; ForNavReport50095_v6_1_0_2112) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50095 "Sales Order UH new"
{
    Caption = 'Sales Order';
    RDLCLayout = './Layouts/SalesOrderUHnew.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Sales Header"; "Sales Header")
        {
            DataItemTableView = sorting("Document Type", "No.") where("Document Type" = const(Order));
            PrintOnlyIfDetail = true;
            RequestFilterFields = "No.", "Sell-to Customer No.", "Bill-to Customer No.", "Ship-to Code", "No. Printed";
            RequestFilterHeading = 'Sales Order';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            dataitem("Sales Line"; "Sales Line")
            {
                DataItemLink = "Document No." = field("No.");
                DataItemTableView = sorting("Document Type", "Document No.", "Line No.") where("Document Type" = const(Order));
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                dataitem(SalesLineComments; "Sales Comment Line")
                {
                    DataItemLink = "No." = field("Document No."), "Document Line No." = field("Line No.");
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    trigger OnAfterGetRecord();
                    begin
                        begin
                            TempSalesLine.Init;
                            TempSalesLine."Document Type" := "Sales Header"."Document Type";
                            TempSalesLine."Document No." := "Sales Header"."No.";
                            TempSalesLine."Line No." := HighestLineNo + 10;
                            HighestLineNo := TempSalesLine."Line No.";
                        end;
                        if StrLen(Comment) <= MaxStrLen(TempSalesLine.Description) then begin
                            TempSalesLine.Description := Comment;
                            TempSalesLine."Description 2" := '';
                        end else begin
                            SpacePointer := MaxStrLen(TempSalesLine.Description) + 1;
                            while (SpacePointer > 1) and (Comment[SpacePointer] <> ' ') do
                                SpacePointer := SpacePointer - 1;
                            if SpacePointer = 1 then
                                SpacePointer := MaxStrLen(TempSalesLine.Description) + 1;
                            TempSalesLine.Description := CopyStr(Comment, 1, SpacePointer - 1);
                            TempSalesLine."Description 2" := CopyStr(CopyStr(Comment, SpacePointer + 1), 1, MaxStrLen(TempSalesLine."Description 2"));
                        end;
                        TempSalesLine.Insert;
                    end;

                }
                trigger OnPreDataItem();
                begin
                    TempSalesLine.Reset;
                    TempSalesLine.DeleteAll;
                end;

                trigger OnAfterGetRecord();
                begin
                    TempSalesLine := "Sales Line";
                    TempSalesLine.Insert;
                    HighestLineNo := "Line No.";
                end;

                trigger OnPostDataItem();
                begin
                end;

            }
            dataitem("Sales Comment Line"; "Sales Comment Line")
            {
                DataItemLink = "No." = field("No.");
                DataItemTableView = sorting("Document Type", "No.", "Document Line No.", "Line No.") where("Document Type" = const(Order), "Document Line No." = const(0));
                column(ReportForNavId_4; 4) { } // Autogenerated by ForNav - Do not delete
                trigger OnPreDataItem();
                begin
                    begin
                        TempSalesLine.Init;
                        TempSalesLine."Document Type" := "Sales Header"."Document Type";
                        TempSalesLine."Document No." := "Sales Header"."No.";
                        TempSalesLine."Line No." := HighestLineNo + 1000;
                        HighestLineNo := TempSalesLine."Line No.";
                    end;
                    TempSalesLine.Insert;
                end;

                trigger OnAfterGetRecord();
                begin
                    begin
                        TempSalesLine.Init;
                        TempSalesLine."Document Type" := "Sales Header"."Document Type";
                        TempSalesLine."Document No." := "Sales Header"."No.";
                        TempSalesLine."Line No." := HighestLineNo + 1000;
                        HighestLineNo := TempSalesLine."Line No.";
                    end;
                    if StrLen(Comment) <= MaxStrLen(TempSalesLine.Description) then begin
                        TempSalesLine.Description := Comment;
                        TempSalesLine."Description 2" := '';
                    end else begin
                        SpacePointer := MaxStrLen(TempSalesLine.Description) + 1;
                        while (SpacePointer > 1) and (Comment[SpacePointer] <> ' ') do
                            SpacePointer := SpacePointer - 1;
                        if SpacePointer = 1 then
                            SpacePointer := MaxStrLen(TempSalesLine.Description) + 1;
                        TempSalesLine.Description := CopyStr(Comment, 1, SpacePointer - 1);
                        TempSalesLine."Description 2" := CopyStr(CopyStr(Comment, SpacePointer + 1), 1, MaxStrLen(TempSalesLine."Description 2"));
                    end;
                    TempSalesLine.Insert;
                end;

            }
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_5; 5) { } // Autogenerated by ForNav - Do not delete
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_6; 6) { } // Autogenerated by ForNav - Do not delete
                    column(Mandant; Mandant)
                    {
                    }
                    column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
                    {
                    }
                    column(Sales_Header_Bill_to_Customer_No_; "Sales Header"."Bill-to Customer No.")
                    {
                    }
                    column(Sales_Header_Order_Date; Format("Sales Header"."Order Date", 0, '<Month,2>/<Day,2>/<Year4>'))
                    {
                    }
                    column(Sales_Header_No_; "Sales Header"."No.")
                    {
                    }
                    column(CompanyInformation_Picture; CompanyInformation.Picture)
                    {
                    }
                    column(SalesLine_Number; SalesLine.Number)
                    {
                    }
                    column(CopyNo; CopyNo)
                    {
                    }
                    column(TaxRegNo; TaxRegNo)
                    {
                    }
                    column(TaxRegLabel; TaxRegLabel)
                    {
                    }
                    column(BillToAddress_8; BillToAddress[8])
                    {
                    }
                    column(CompanyAddress_8; CompanyAddress[8])
                    {
                    }
                    column(CompanyAddress_7; CompanyAddress[7])
                    {
                    }
                    column(BillToAddress_7; BillToAddress[7])
                    {
                    }
                    column(BillToAddress_6; BillToAddress[6])
                    {
                    }
                    column(BillToAddress_5; BillToAddress[5])
                    {
                    }
                    column(BillToAddress_4; BillToAddress[4])
                    {
                    }
                    column(BillToAddress_3; BillToAddress[3])
                    {
                    }
                    column(BillToAddress_2; BillToAddress[2])
                    {
                    }
                    column(BillToAddress_1; BillToAddress[1])
                    {
                    }
                    column(CopyTxt; CopyTxt)
                    {
                    }
                    column(CompanyAddress_6; CompanyAddress[6])
                    {
                    }
                    column(CompanyAddress_5; CompanyAddress[5])
                    {
                    }
                    column(CompanyAddress_4; CompanyAddress[4])
                    {
                    }
                    column(CompanyAddress_3; CompanyAddress[3])
                    {
                    }
                    column(CompanyAddress_2; CompanyAddress[2])
                    {
                    }
                    column(CompanyAddress_1; CompanyAddress[1])
                    {
                    }
                    column(CompanyInformation_Home_Page; CompanyInformation."Home Page")
                    {
                    }
                    column(EmptyString_Control1105600015; '')
                    {
                    }
                    column(CompanyInformation_E_Mail; CompanyInformation."E-Mail")
                    {
                    }
                    column(Jurisdiction_and_place_of_fulfillment; 'Jurisdiction and place of fulfillment')
                    {
                    }
                    column(EmptyString; 'Swift number:  ' + CompanyInformation."SWIFT Code")
                    {
                    }
                    column(Fax_CompanyInformation_Fax_No_; 'Fax ' + CompanyInformation."Fax No.")
                    {
                    }
                    column(EmptyString_Control1105600009; 'Routing number:  ' + CompanyInformation."Payment Routing No.")
                    {
                    }
                    column(Phone_CompanyInformation_Phone_No_; 'Phone ' + CompanyInformation."Phone No.")
                    {
                    }
                    column(EmptyString_Control1105600019; ' ')
                    {
                    }
                    column(EmptyString_Control1105600010; 'Account number:  ' + CompanyInformation."Bank Account No.")
                    {
                    }
                    column(CompanyInformation_Name_Control1105600005; CompanyInformation.City + ' ' + CompanyInformation."Post Code")
                    {
                    }
                    column(Registration_No_CompanyInformation_Registration_No_; 'Registration No. ' + CompanyInformation."Registration No.")
                    {
                    }
                    column(CompanyInformation_Name_Control1105600020; CompanyInformation.Name)
                    {
                    }
                    column(EmptyString_Control1105600011; 'Toledo, Ohio 43604')
                    {
                    }
                    column(CompanyInformation_Address_2; CompanyInformation."Address 2")
                    {
                    }
                    column(CompanyInformation_Bank_Name_BLZ_CompanyInformation_Bank_Bra; CompanyInformation."Bank Name")
                    {
                    }
                    column(IBAN_CompanyInformation_IBAN_BIC_CompanyInformation_SWIFT_Co; '519 Madison Ave.')
                    {
                    }
                    column(CompanyInformation_Address; CompanyInformation.Address)
                    {
                    }
                    column(Companyinfo_HomePage; Companyinfo."Home Page")
                    {
                    }
                    column(Steuer_Nr_CompanyinfoRegistrationNo; 'Steuer-Nr. ' + Companyinfo."Registration No.")
                    {
                    }
                    column(USt_IdNr__CompanyinfoVATRegistrationNo; 'USt-Id. Nr.: ' + Companyinfo."VAT Registration No.")
                    {
                    }
                    column(Companyinfo_Name; Companyinfo.Name)
                    {
                    }
                    column(GerichtsstandundErfullungsortfur; 'Gerichtsstand und Erfüllungsort für')
                    {
                    }
                    column(CompanyinfoBankName__BLZ_CompanyinfoBankBranchNo__EUR_Kto_Co; Companyinfo."Bank Name" + ', BLZ ' + Companyinfo."Bank Branch No." + ', EUR-Kto  ' + Companyinfo."Bank Account No.")
                    {
                    }
                    column(IBAN__CompanyinfoIBAN__BIC__CompanyinfoSWIFTCode; 'IBAN: ' + Companyinfo.Iban + ', BIC: ' + Companyinfo."SWIFT Code")
                    {
                    }
                    column(Companyinfo_E_Mail; Companyinfo."E-Mail")
                    {
                    }
                    column(Telefax_CompanyinfoFaxNo; 'Telefax ' + Companyinfo."Fax No.")
                    {
                    }
                    column(Telefon_CompanyinfoPhoneNo; 'Telefon ' + Companyinfo."Phone No.")
                    {
                    }
                    column(CompanyinfoPostCode__CompanyinfoCity; Companyinfo."Post Code" + ' ' + Companyinfo.City)
                    {
                    }
                    column(Companyinfo_Address; Companyinfo.Address)
                    {
                    }
                    dataitem(Auftragsdaten; Integer)
                    {
                        DataItemTableView = sorting(Number) order(ascending) where(Number = const(1));
                        column(ReportForNavId_79; 79) { } // Autogenerated by ForNav - Do not delete
                        column(STRSUBSTNO_text50002_SalesHeaderExternalDocumentNo; StrSubstNo(text50002, "Sales Header"."External Document No."))
                        {
                        }
                        column(STRSUBSTNO_text50001_FORMAT_SalesHeaderOrderDate_0__Month_2_; StrSubstNo(text50001, Format("Sales Header"."Order Date", 0, '<Month,2>/<Day,2>/<Year4>')))
                        {
                        }
                    }
                    dataitem(Lieferadresse; Integer)
                    {
                        DataItemTableView = sorting(Number) order(ascending) where(Number = const(1));
                        column(ReportForNavId_82; 82) { } // Autogenerated by ForNav - Do not delete
                        column(ShipToAddress_8; ShipToAddress[8])
                        {
                        }
                        column(ShipToAddress_7; ShipToAddress[7])
                        {
                        }
                        column(ShipToAddress_6; ShipToAddress[6])
                        {
                        }
                        column(ShipToAddress_5; ShipToAddress[5])
                        {
                        }
                        column(ShipToAddress_4; ShipToAddress[4])
                        {
                        }
                        column(ShipToAddress_3; ShipToAddress[3])
                        {
                        }
                        column(ShipToAddress_2; ShipToAddress[2])
                        {
                        }
                        column(ShipToAddress_1; ShipToAddress[1])
                        {
                        }
                    }
                    dataitem(AuftrAnsprechpartner; Integer)
                    {
                        DataItemTableView = sorting(Number) order(ascending) where(Number = const(1));
                        column(ReportForNavId_91; 91) { } // Autogenerated by ForNav - Do not delete
                        column(STRSUBSTNO_text50005_SalesPurchPersonPhoneNo; StrSubstNo(text50005, SalesPurchPerson."Phone No."))
                        {
                        }
                        column(STRSUBSTNO_text50007_SalesPurchPersonE_Mail; StrSubstNo(text50007, SalesPurchPerson."E-Mail"))
                        {
                        }
                        column(STRSUBSTNO_text50004_SalesPurchPersonName; StrSubstNo(text50004, SalesPurchPerson.Name))
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                        end;

                    }
                    dataitem(TechnAnsprechpartner; Integer)
                    {
                        DataItemTableView = sorting(Number) order(ascending) where(Number = const(1));
                        column(ReportForNavId_96; 96) { } // Autogenerated by ForNav - Do not delete
                        column(STRSUBSTNO_text50005_SalesPurchPersonPhoneNo2; StrSubstNo(text50005, SalesPurchPerson."Phone No."))
                        {
                        }
                        column(STRSUBSTNO_text50007_SalesPurchPersonE_Mail2; StrSubstNo(text50007, SalesPurchPerson."E-Mail"))
                        {
                        }
                        column(STRSUBSTNO_text50003_SalesPurchPersonName; StrSubstNo(text50003, SalesPurchPerson.Name))
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            if "Sales Header"."Salesperson Code" = '' then
                                CurrReport.Break;
                            if not SalesPurchPerson.Get("Sales Header"."Salesperson Code") then
                                CurrReport.Break;
                        end;

                    }
                    dataitem(AusgabeVortextzeilen; "Sales Line")
                    {
                        DataItemLink = "Document Type" = field("Document Type"), "Document No." = field("No.");
                        DataItemLinkReference = "Sales Header";
                        DataItemTableView = sorting("Document Type", "Document No.", "Line No.") order(ascending);
                        column(ReportForNavId_101; 101) { } // Autogenerated by ForNav - Do not delete
                        column(AusgabeVortextzeilen_Description; Description)
                        {
                        }
                    }
                    dataitem(SalesLine; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_103; 103) { } // Autogenerated by ForNav - Do not delete
                        column(STRSUBSTNO_text50009_gCurrency; StrSubstNo(text50009, gCurrency))
                        {
                        }
                        column(PrintFooter; PrintFooter)
                        {
                        }
                        column(AmountExclInvDisc; Format(AmountExclInvDisc, 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(STRSUBSTNO_Text001_CurrReport_PAGENO_1; StrSubstNo(Text001, ReportForNav.PageNo - 1))
                        {
                        }
                        column(UnitPriceToPrint; Format(UnitPriceToPrint, 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(TempSalesLine_Quantity; Format(TempSalesLine.Quantity, 0, '<Precision,0:5><Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(TempSalesLine_UnitofMeasure; TempSalesLine."Unit of Measure")
                        {
                        }
                        column(TempSalesLine_Description; TempSalesLine.Description)
                        {
                        }
                        column(TempSalesLine_No_; ItemTariffPbg)
                        {
                        }
                        column(TempSalesLine_Description22; TempSalesLine."Description 2")
                        {
                        }
                        column(STRSUBSTNO_Text002_CurrReport_PAGENO_1; StrSubstNo(Text002, ReportForNav.PageNo + 1))
                        {
                        }
                        column(TotalTaxLabel; TotalTaxLabel)
                        {
                        }
                        column(BreakdownLabel_4; BreakdownLabel[4])
                        {
                        }
                        column(BreakdownAmt_4; Format(BreakdownAmt[4], 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(BreakdownAmt_3; Format(BreakdownAmt[3], 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(BreakdownAmt_2; Format(BreakdownAmt[2], 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(BreakdownAmt_1; Format(BreakdownAmt[1], 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(BreakdownLabel_3; BreakdownLabel[3])
                        {
                        }
                        column(BreakdownLabel_2; BreakdownLabel[2])
                        {
                        }
                        column(BreakdownLabel_1; BreakdownLabel[1])
                        {
                        }
                        column(BreakdownTitle; BreakdownTitle)
                        {
                        }
                        column(TempSalesLine_Line_Amount_TaxAmount_TempSalesLine_Inv_Discou; Format(TempSalesLine."Line Amount" + TaxAmount - TempSalesLine."Inv. Discount Amount", 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(TaxAmount; Format(TaxAmount, 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(TempSalesLine_Inv_Discount_Amount; Format(TempSalesLine."Inv. Discount Amount", 0, '<Precision,<2:2><Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(TempSalesLine_Line_Amount_TaxLiable; Format(TempSalesLine."Line Amount" - TaxLiable, 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(TaxLiable; Format(TaxLiable, 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                        {
                        }
                        column(ThetermsofsalehereinareIncoterms2010; 'The terms of sale herein are Incoterms 2010')
                        {
                        }
                        column(PaymentTerms_Description; PaymentTerms.Description)
                        {
                        }
                        column(ShipmentMethod_Description; ShipmentMethod.Description)
                        {
                        }
                        column(STRSUBSTNO_text50101_CompanyInformationName; StrSubstNo(text50101, CompanyInformation.Name))
                        {
                        }
                        dataitem(ArtikelPDM; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = const(1));
                            column(ReportForNavId_134; 134) { } // Autogenerated by ForNav - Do not delete
                            column(PDMTEXT; PDMTEXT)
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                            end;

                        }
                        dataitem("Zuschläge/rabatte"; Integer)
                        {
                            DataItemTableView = sorting(Number) order(ascending);
                            column(ReportForNavId_136; 136) { } // Autogenerated by ForNav - Do not delete
                            column(RabattZuschlagText; RabattZuschlagText)
                            {
                            }
                            column(ZRVorzeichen; ZRVorzeichen)
                            {
                                AutoFormatType = 2;
                            }
                            trigger OnPreDataItem();
                            var
                                lCounter: Integer;
                            begin
                                SetRange(Number, 1, lCounter);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                RabattZuschlagText := '';
                            end;

                        }
                        dataitem(KitSalesLine; Integer)
                        {
                            DataItemTableView = sorting(Number);
                            column(ReportForNavId_140; 140) { } // Autogenerated by ForNav - Do not delete
                            column(KitSalesLine_KitSalesLine_Number; Number)
                            {
                            }
                            column(AmountExclInvDisc2; Format(AmountExclInvDisc, 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                            {
                            }
                            column(TempSalesLine_Line_Amount_TaxAmount_TempSalesLine_Inv_Discou2; Format(TempSalesLine."Line Amount" + TaxAmount - TempSalesLine."Inv. Discount Amount", 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                            {
                            }
                            column(TaxAmount2; Format(TaxAmount, 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                            {
                            }
                            column(TempSalesLine_Line_Amount_TaxLiable2; Format(TempSalesLine."Line Amount" - TaxLiable, 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                            {
                            }
                            column(TaxLiable2; Format(TaxLiable, 0, '<Sign><Integer Thousand><1000character,,><Decimals><Comma,.>'))
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if false then begin
                                    if Number > 1 then begin
                                        TaxLiable := 0;
                                        TaxAmount := 0;
                                        AmountExclInvDisc := 0;
                                        TempSalesLine."Line Amount" := 0;
                                        TempSalesLine."Inv. Discount Amount" := 0;
                                    end
                                end;
                            end;

                        }
                        dataitem(Lieferdatum; Integer)
                        {
                            DataItemTableView = sorting(Number) order(ascending) where(Number = const(1));
                            column(ReportForNavId_146; 146) { } // Autogenerated by ForNav - Do not delete
                            column(TempSalesLine_ShipmentDate; Format(TempSalesLine."Shipment Date", 0, '<Month,2>/<Day,2>/<Year4>'))
                            {
                            }
                            column(UrsprlandText; UrsprlandText)
                            {
                                AutoFormatType = 2;
                            }
                            trigger OnPreDataItem();
                            begin
                                if TempSalesLine.Type <> TempSalesLine.Type::Item then
                                    CurrReport.Break;
                                if TempSalesLine."No." = '' then
                                    CurrReport.Break;
                                if UrsprLand <> '' then
                                    UrsprlandText := StrSubstNo(text500112, UrsprLand)
                                else
                                    UrsprlandText := ''
                            end;

                        }
                        trigger OnPreDataItem();
                        begin

                            NumberOfLines := TempSalesLine.Count;
                            SetRange(Number, 1, NumberOfLines);
                            OnLineNumber := 0;
                            PrintFooter := false;
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            OnLineNumber := OnLineNumber + 1;
                            begin
                                if OnLineNumber = 1 then
                                    TempSalesLine.Find('-')
                                else
                                    TempSalesLine.Next;
                                if TempSalesLine.Type = 0 then begin
                                    TempSalesLine."No." := '';
                                    TempSalesLine."Unit of Measure" := '';
                                    TempSalesLine."Line Amount" := 0;
                                    TempSalesLine."Inv. Discount Amount" := 0;
                                    TempSalesLine.Quantity := 0;
                                end;
                                //  END ELSE IF Type = Type::"G/L Account" THEN
                                //	"No." := '';
                                if TempSalesLine."Tax Area Code" <> '' then
                                    TaxAmount := TempSalesLine."Amount Including VAT" - TempSalesLine.Amount
                                else
                                    TaxAmount := 0;
                                if TaxAmount <> 0 then begin
                                    TaxFlag := true;
                                    TaxLiable := TempSalesLine.Amount;
                                end else begin
                                    TaxFlag := false;
                                    TaxLiable := 0;
                                end;
                                AmountExclInvDisc := TempSalesLine."Line Amount";
                                if TempSalesLine.Quantity = 0 then
                                    UnitPriceToPrint := 0  // so it won't print
                                else
                                    //  UnitPriceToPrint := ROUND(AmountExclInvDisc / Quantity,0.00001);	 //Röthig: 06.08.2015
                                    UnitPriceToPrint := TempSalesLine."Unit Price";
                            end;
                            if false then begin
                                if OnLineNumber = NumberOfLines then
                                    PrintFooter := true;
                            end;
                            UrsprLand := '';
                            if TempSalesLine.Type = TempSalesLine.Type::Item then
                                if Item.Get(TempSalesLine."No.") then
                                    UrsprLand := Item."Country/Region of Origin Code";
                        end;

                    }
                }
                trigger OnPreDataItem();
                begin
                    NoLoops := 1 + Abs(NoCopies);
                    if NoLoops <= 0 then
                        NoLoops := 1;
                    CopyNo := 0;
                end;

                trigger OnAfterGetRecord();
                var
                    SalesPost: Codeunit "Sales-Post";
                begin

                    if CopyNo = NoLoops then begin
                        if not CurrReport.Preview then
                            SalesPrinted.Run("Sales Header");
                        CurrReport.Break;
                    end else
                        CopyNo := CopyNo + 1;
                    if CopyNo = 1 then // Original
                        Clear(CopyTxt)
                    else
                        CopyTxt := Text000;
                    FirstNachtext := true;
                    FirstFracht := true;
                end;

            }
            trigger OnPreDataItem();
            begin
                gGLsetup.Get();
                gGLsetup.TestField("LCY Code");
                gGLsetup."LCY Code" := 'US$';
            end;

            trigger OnAfterGetRecord();
            begin
                if PrintCompany then begin
                    if RespCenter.Get("Responsibility Center") then begin
                        FormatAddress.RespCenter(CompanyAddress, RespCenter);
                        CompanyInformation."Phone No." := RespCenter."Phone No.";
                        CompanyInformation."Fax No." := RespCenter."Fax No.";
                    end;
                end;
                CurrReport.Language := Language.GetLanguageID("Language Code");
                Mandant := CompanyInformation.Name;
                //IF CompanyInformation.Address<>'' THEN
                //   Mandant:=Mandant+'  '+CompanyInformation.Address;
                if CompanyInformation."Address 2" <> '' then
                    Mandant := Mandant + '  ' + CompanyInformation."Address 2";
                Mandant := Mandant + ' ' + CompanyInformation.City + ' ' + CompanyInformation."Post Code";
                gCurrency := "Sales Header"."Currency Code";
                if gCurrency = '' then
                    gCurrency := gGLsetup."LCY Code";
                if "Salesperson Code" = '' then
                    Clear(SalesPurchPerson)
                else
                    SalesPurchPerson.Get("Salesperson Code");
                if "Payment Terms Code" = '' then
                    Clear(PaymentTerms)
                else
                    PaymentTerms.Get("Payment Terms Code");
                if "Shipment Method Code" = '' then
                    Clear(ShipmentMethod)
                else
                    ShipmentMethod.Get("Shipment Method Code");
                if not CurrReport.Preview then begin
                    if ArchiveDocument then
                        ArchiveManagement.StoreSalesDocument("Sales Header", LogInteraction);
                    if LogInteraction then begin
                        CalcFields("No. of Archived Versions");
                        if "Bill-to Contact No." <> '' then
                            SegManagement.LogDocument(
                              3, "No.", "Doc. No. Occurrence",
                              "No. of Archived Versions", Database::Contact, "Bill-to Contact No."
                              , "Salesperson Code", "Campaign No.", "Posting Description", "Opportunity No.")
                        else
                            SegManagement.LogDocument(
                              3, "No.", "Doc. No. Occurrence",
                              "No. of Archived Versions", Database::Customer, "Bill-to Customer No.",
                              "Salesperson Code", "Campaign No.", "Posting Description", "Opportunity No.");
                    end;
                end;
                Clear(BreakdownTitle);
                Clear(BreakdownLabel);
                Clear(BreakdownAmt);
                TotalTaxLabel := Text008;
                TaxRegNo := '';
                TaxRegLabel := '';
                if "Tax Area Code" <> '' then begin
                    TaxArea.Get("Tax Area Code");
                end;
                if "Posting Date" <> 0D then
                    UseDate := "Posting Date"
                else
                    UseDate := WorkDate;
            end;

        }
    }

    requestpage
    {

        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }

        trigger OnInit()
        begin
            LogInteractionEnable := true;
            ArchiveDocumentEnable := true;
        end;

        trigger OnOpenPage()
        begin
            ArchiveDocument := ArchiveManagement.SalesDocArchiveGranule;
            LogInteraction := SegManagement.FindInteractTmplCode(3) <> '';
            ArchiveDocumentEnable := ArchiveDocument;
            LogInteractionEnable := LogInteraction;
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        // PrintCompany := TRUE;
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        CompanyInformation.Get;
        SalesSetup.Get;
        CompanyInformation.CalcFields(Picture);
        case SalesSetup."Logo Position on Documents" of
            SalesSetup."logo position on documents"::"No Logo":
                ;
            SalesSetup."logo position on documents"::Left:
                begin
                    //	  CompanyInformation.CALCFIELDS(Picture);
                end;
            SalesSetup."logo position on documents"::Center:
                begin
                    CompanyInfo1.Get;
                    CompanyInfo1.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Right:
                begin
                    CompanyInfo2.Get;
                    CompanyInfo2.CalcFields(Picture);
                end;
        end;
        if PrintCompany then
            FormatAddress.Company(CompanyAddress, CompanyInformation)
        else
            Clear(CompanyAddress);
        ;
        ReportsForNavPre;
    end;

    var
        TaxLiable: Decimal;
        UnitPriceToPrint: Decimal;
        AmountExclInvDisc: Decimal;
        ShipmentMethod: Record "Shipment Method";
        PaymentTerms: Record "Payment Terms";
        SalesPurchPerson: Record "Salesperson/Purchaser";
        CompanyInformation: Record "Company Information";
        CompanyInfo1: Record "Company Information";
        CompanyInfo2: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        TempSalesLine: Record "Sales Line" temporary;
        RespCenter: Record "Responsibility Center";
        Language: Record Language;
        TaxArea: Record "Tax Area";
        Item: Record Item;
        CompanyAddress: array[8] of Text[50];
        BillToAddress: array[8] of Text[50];
        ShipToAddress: array[8] of Text[50];
        CopyTxt: Text[10];
        PrintCompany: Boolean;
        PrintFooter: Boolean;
        TaxFlag: Boolean;
        NoCopies: Integer;
        NoLoops: Integer;
        CopyNo: Integer;
        NumberOfLines: Integer;
        OnLineNumber: Integer;
        HighestLineNo: Integer;
        SpacePointer: Integer;
        SalesPrinted: Codeunit "Sales-Printed";
        FormatAddress: Codeunit "Format Address";
        SalesTaxCalc: Codeunit "Sales Tax Calculate";
        TaxAmount: Decimal;
        SegManagement: Codeunit SegManagement;
        ArchiveManagement: Codeunit ArchiveManagement;
        ArchiveDocument: Boolean;
        LogInteraction: Boolean;
        Text000: label 'COPY';
        Text001: label 'Transferred from page %1';
        Text002: label 'Transferred to page %1';
        Text003: label 'Sales Tax Breakdown:';
        Text004: label 'Other Taxes';
        Text005: label 'Total Sales Tax:';
        Text006: label 'Tax Breakdown:';
        Text007: label 'Total Tax:';
        Text008: label 'Tax:';
        TaxRegNo: Text[30];
        TaxRegLabel: Text[30];
        TotalTaxLabel: Text[30];
        BreakdownTitle: Text[30];
        BreakdownLabel: array[4] of Text[30];
        BreakdownAmt: array[4] of Decimal;
        BrkIdx: Integer;
        PrevPrintOrder: Integer;
        PrevTaxPercent: Decimal;
        UseDate: Date;
        UseExternalTaxEngine: Boolean;
        [InDataSet]
        ArchiveDocumentEnable: Boolean;
        [InDataSet]
        LogInteractionEnable: Boolean;
        FirstNachtext: Boolean;
        text50000: label 'Order Confirmation';
        text50001: label 'Your purchase order of %1';
        text50002: label 'Your purchase order no.: %1';
        text50005: label 'Phone: %1';
        text50006: label 'Fax: %1';
        text50007: label 'Email: %1';
        text50009: label 'Total Price (%1)';
        text50010: label 'Subtotal';
        text50011: label 'Your VAT-No.';
        text50003: label 'Your contact partner is %1';
        text50004: label 'The order confirmation has been written by %1';
        text50015: label 'Proforma-Invoice';
        text50020: label 'Continuation on page %1';
        text50100: label 'Supplies and Services of our house exclusively take place on the basis of our well-known terms of sales and delivery.';
        text50300: label 'Blanket Order No.';
        text500200: label 'Your Item No.: %1';
        text50101: label 'With Kind Regards\ \%1';
        text500111: label 'Our Account No.: %1';
        text500112: label 'Country of origin: %1';
        Text50050: label 'Wareneingangsbestätigung %1';
        Text50032: label 'Drawing No.: %1/%2';
        FirstFracht: Boolean;
        ItemTariffPbg: Text[80];
        Mandant: Text[250];
        UrsprlandText: Text[90];
        UrsprLand: Code[10];
        ZeilenZahl: Integer;
        ZRVorzeichen: Text[30];
        RabattZuschlagText: Text[60];
        "GoptÜberschrift": Option "Order Confirmation","Proforma Invoice";
        TabText: array[12] of Text[77];
        PDMArtikel: Record Item;
        PDMTEXT: Text[250];
        AktuellenPDMTextZeigen: Boolean;
        Crossref: Record "Item Cross Reference";
        gCurrency: Code[10];
        gGLsetup: Record "General Ledger Setup";
        "Absender-UH-DE": Boolean;
        Companyinfo: Record "Company Information";

    local procedure OnPreSectionPageLoop_Header1(var PageLoop: Record Integer);
    begin
        begin
            ReportForNav.ShowOutput(GoptÜberschrift <> Goptüberschrift::"Proforma Invoice");
        end;
    end;

    local procedure OnPreSectionPageLoop_Header2(var PageLoop: Record Integer);
    begin
        begin
            ReportForNav.ShowOutput(GoptÜberschrift = Goptüberschrift::"Proforma Invoice");
        end;
    end;

    local procedure OnPreSectionPageLoop_Footer3(var PageLoop: Record Integer);
    begin
        begin
            ReportForNav.ShowOutput(("Absender-UH-DE" = false));
        end;
    end;

    local procedure OnPreSectionPageLoop_Footer4(var PageLoop: Record Integer);
    begin
        begin
            ReportForNav.ShowOutput(("Absender-UH-DE" = true) and (GoptÜberschrift = Goptüberschrift::"Proforma Invoice"));
        end;
    end;

    local procedure OnPreSectionSalesLine_Body13(var SalesLine: Record Integer);
    begin
    end;

    local procedure OnPreSectionSalesLine_Body14(var SalesLine: Record Integer);
    begin
        begin
            Item.Init;
            ItemTariffPbg := TempSalesLine."No.";
            if TempSalesLine."Cross-Reference No." <> '' then begin
                ItemTariffPbg := TempSalesLine."Cross-Reference No.";
            end else begin
                Crossref.Reset;
                Crossref.SetRange("Item No.", TempSalesLine."No.");
                Crossref.SetRange("Cross-Reference Type", Crossref."cross-reference type"::Customer);
                Crossref.SetRange("Cross-Reference Type No.", "Sales Header"."Sell-to Customer No.");
                if Crossref.FindFirst then begin
                    if Crossref."Cross-Reference No." <> '' then begin
                        ItemTariffPbg := Crossref."Cross-Reference No.";
                        if Crossref.Description <> '' then begin
                            TempSalesLine.Description := Crossref.Description;
                            TempSalesLine."Description 2" := Crossref."Description 2";
                            //   TempSalesLine.MODIFY;
                        end;
                    end;
                end else begin
                    Crossref.SetRange("Cross-Reference Type", Crossref."cross-reference type"::" ");
                    Crossref.SetRange("Cross-Reference Type No.", '');
                    if Crossref.FindFirst then begin
                        if Crossref."Cross-Reference No." <> '' then begin
                            ItemTariffPbg := Crossref."Cross-Reference No.";
                            if Crossref.Description <> '' then begin
                                TempSalesLine.Description := Crossref.Description;
                                TempSalesLine."Description 2" := Crossref."Description 2";
                                //	TempSalesLine.MODIFY;
                            end;
                        end;
                    end;
                end;
            end;
            if (TempSalesLine.Type = TempSalesLine.Type::Item) and (TempSalesLine."No." <> '') then begin
                if Item.Get(TempSalesLine."No.") then
                    ItemTariffPbg := ItemTariffPbg + ' / ' + Item."Tariff No." + ' / ' + TempSalesLine."Gen. Bus. Posting Group";
            end;
        end;
    end;

    local procedure OnPostSectionSalesLine_Body14(var SalesLine: Record Integer);
    begin
        begin
            if OnLineNumber = NumberOfLines then
                PrintFooter := true;
        end;
    end;

    local procedure OnPreSectionSalesLine_Body15(var SalesLine: Record Integer);
    begin
        begin
        end;
    end;

    local procedure OnPreSectionSalesLine_Body16(var SalesLine: Record Integer);
    begin
        begin
        end;
    end;

    local procedure OnPreSectionSalesLine_Body17(var SalesLine: Record Integer);
    begin
        begin
        end;
    end;

    local procedure OnPreSectionSalesLine_Body18(var SalesLine: Record Integer);
    begin
        begin
        end;
    end;

    local procedure OnPostSectionSalesLine_Body18(var SalesLine: Record Integer);
    begin
        begin
            FirstNachtext := false;
        end;
    end;

    local procedure OnPreSectionSalesLine_Body19(var SalesLine: Record Integer);
    begin
        begin
        end;
    end;

    local procedure OnPreSectionSalesLine_Body20(var SalesLine: Record Integer);
    begin
        begin
        end;
    end;

    local procedure OnPreSectionSalesLine_Footer22(var SalesLine: Record Integer);
    begin
        begin
            ReportForNav.ShowOutput(PrintFooter);
        end;
    end;

    local procedure OnPreSectionArtikelPDM_Body25(var ArtikelPDM: Record Integer);
    begin
        begin
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50095_v6_1_0_2112;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_1_0_2112\ForNav.Reports.6.1.0.2112.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.1.0.2112.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.1.0.2112 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNav := ReportForNav.Report_6_1_0_2112(CurrReport.ObjectId(), CurrReport.Language(), SerialNumber(), UserId(), CompanyName());
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
